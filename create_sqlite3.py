#!/usr/bin/env python3
#   Creates a sqlite3 database from the (full) json file generated by get_metadata.py.
#   Full json for each tweet is stored in the json table (id, json).
#       (When accessing this data you may need to use ast.literal_eval(row['json']) instead
#        of json.loads(). The " are being converted to ' for some reason. I dunno.)
#   Selected values are saved in in the tweets table for easy access
#       (The geo & place fields are populated with 'y' if data exists. You'd 
#        have to access the json to get at the data. Sorry, lazy.)
     
import os
import sys
import time
import datetime
import json
import sqlite3
import pytz
from datetime import datetime, timedelta

# - Config
db_filename = "realdonaldtrump.sqlite3"  # The output db. will be created if not exists
input_json_fn = 'realdonaldtrump.json' 
commit_interval = 10000

def db_connect(fn):
    db = sqlite3.connect(fn)
    db.row_factory = sqlite3.Row
    db_create_tables(db)
    return db

def db_create_tables(db):
    cur = db.cursor()
    try:
        cur.execute("CREATE TABLE IF NOT EXISTS json (id INTEGER PRIMARY KEY, json TEXT)")
        cur.execute("CREATE TABLE IF NOT EXISTS tweets (id INTEGER PRIMARY KEY, screen_name TEXT, created_ts INTEGER, retweet_count INTEGER, favorite_count INTEGER, source TEXT, place TEXT, geo TEXT, tweet TEXT, last_checked_ts INTEGER)")
        cur.execute("CREATE INDEX IF NOT EXISTS tweets_created_ts ON tweets(created_ts)")
    except Exception as e:
        print ("error db_create_tables")

if '__main__' == __name__:
    db = db_connect(db_filename)
    cur = db.cursor()
    count = 0
    with open(input_json_fn) as f:
        j = json.load(f)
    for t in j:
        count += 1
        d =  datetime.strptime(t['created_at'],'%a %b %d %H:%M:%S +0000 %Y').replace(tzinfo=pytz.UTC)
        place = ""
        geo = ""
        if t['place'] is not None:
            place = 'y'
        if t['geo'] is not None:
            geo = 'y'
        cur.execute("INSERT OR REPLACE INTO json(id, json) VALUES (?,?)",(int(t['id']), str(t)))
        cur.execute("INSERT OR REPLACE INTO tweets(id, screen_name, created_ts, retweet_count, favorite_count, source, place, geo, tweet, last_checked_ts) VALUES (?,?,?,?,?,?,?,?,?,?)",(
            int(t['id']), 
            t['user']['screen_name'], 
            int(d.timestamp()), 
            t['retweet_count'], 
            t['favorite_count'], 
            t['source'], 
            place, 
            geo, 
            str(t['text']),
            int(time.time())))

        if not count % commit_interval:
            print("commit {}".format(count))
            db.commit()
    db.commit()
        
